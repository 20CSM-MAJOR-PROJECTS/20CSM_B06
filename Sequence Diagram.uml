1. User Authentication and Account Management:

@startuml
!define ACTOR actor

ACTOR User as user
participant "user1: User" as user1
participant "auth: IAuthentication" as auth
participant "notif: INotificationManagement" as notif
participant "notification1: Notification" as notification1
participant "emailService: EmailService" as emailService

user -> user1: create("johnDoe", "encryptedPassword")
activate user1

user1 -> auth: register()
activate auth

auth -> user1: sendVerificationEmail()


user1 -> emailService: sendEmail("john.doe@example.com", "Verification Email")
activate emailService

emailService --> user1: EmailSentSuccess
deactivate emailService

user1 --> auth: EmailSent


auth --> user: RegistrationSuccess
deactivate auth
deactivate user1

user -> user1: login("johnDoe", "encryptedPassword")
activate user1

user1 -> auth: login()
activate auth

auth -> user1: authenticate()

user1 --> auth: Authenticated


auth -> notif: sendNotification()
activate notif

notif -> notification1: createNotification("Welcome to the System!", user1)
activate notification1

notification1 --> notif: NotificationCreated
deactivate notification1

notif --> auth: NotificationSent
deactivate notif

auth --> user: LoginSuccess
deactivate auth

deactivate user1
@enduml



2. Video Upload and Management


@startuml
!define ACTOR actor

ACTOR ISROUser as isroUser
participant "isroUser1: ISROUser" as isroUser1
participant "iVideoManagement1: IVideoManagement" as iVideoManagement1
participant "video1: Video" as video1
participant "database1: Database" as database1
participant "iDataManagement1: IDataManagement" as iDataManagement1

isroUser -> isroUser1: login()
activate isroUser1

isroUser -> isroUser1: selectVideo("Mars Mission", "/videos/mars_mission.mp4")


isroUser1 -> iVideoManagement1: uploadVideo()
activate iVideoManagement1

iVideoManagement1 -> video1: create("Mars Mission", "Documentary on Mars Mission", "Documentary")
activate video1

video1 --> iVideoManagement1: VideoCreated
deactivate video1

iVideoManagement1 -> database1: addVideo(video1)
activate database1

database1 --> iVideoManagement1: VideoAdded
deactivate database1


iVideoManagement1 --> isroUser1: UploadSuccess
deactivate iVideoManagement1

isroUser1 -> iDataManagement1: synchronizeData()

activate iDataManagement1

iDataManagement1 -> database1: synchronize()
activate database1

database1 --> iDataManagement1: DataSynchronized
deactivate database1

iDataManagement1 --> isroUser1: SynchronizationSuccess
deactivate iDataManagement1


deactivate isroUser1
@enduml


3. Video Classification

@startuml
!define ACTOR actor

ACTOR IsroUser
participant "isroUser1: ISROUser" as ISROUser
participant "video1: Video" as Video
participant "genre1: Genre" as Genre
participant "metadata1: Metadata" as Metadata
participant "videoClassification1: VideoClassification" as VideoClassification
participant "database1: Database" as Database
participant "iDataManagement1: IDataManagement" as IDataManagement

IsroUser -> ISROUser: classifyVideo(video1)
activate ISROUser

ISROUser -> VideoClassification: createClassification(genre1)
activate VideoClassification
deactivate ISROUser

VideoClassification -> Video: setGenre(genre1)
activate Video
deactivate VideoClassification

Video -> Genre: assignGenre()
activate Genre
deactivate Genre

Video -> Metadata: generateMetadata()
activate Metadata
deactivate Metadata
deactivate Video
activate VideoClassification
VideoClassification -> Database: storeClassification()
activate Database
deactivate VideoClassification

Database -> IDataManagement: synchronizeData()
activate IDataManagement
deactivate IDataManagement

deactivate Database



@enduml


4. Video Search

@startuml
participant "isroUser1: ISROUser" as ISROUser
participant "generalUser1: GeneralUser" as GeneralUser
participant "iVideoManagement1: IVideoManagement" as IVideoManagement
participant "video1: Video" as Video
participant "database1: Database" as Database

activate ISROUser
ISROUser -> IVideoManagement: uploadVideo()
activate IVideoManagement
ISROUser <-- IVideoManagement: video1
deactivate IVideoManagement

ISROUser -> IVideoManagement: editMetadata()
activate IVideoManagement
ISROUser <-- IVideoManagement: "Edited"
deactivate IVideoManagement

ISROUser -> Database: searchVideo("Mars Mission")
activate Database
ISROUser <-- Database: video1
deactivate Database

ISROUser -> Video: play()
activate Video
ISROUser <-- Video: "Played"
deactivate Video
deactivate ISROUser

activate GeneralUser
GeneralUser -> Database: searchVideo("Mars Mission")
activate Database
GeneralUser <-- Database: video1
deactivate Database

GeneralUser -> Video: play()
activate Video
GeneralUser <-- Video: "Played"
deactivate Video
deactivate GeneralUser

@enduml



5. Video Statistics and Dashboard

@startuml
participant "user1: User" as User
participant "isroUser1: ISROUser" as ISROUser
participant "dashboard1: Dashboard" as Dashboard
participant "database1: Database" as Database
participant "iDataManagement1: IDataManagement" as IDataManagement

activate User
User -> ISROUser: classifyVideo("Educational")
activate ISROUser
User <-- ISROUser: "Classified as Educational"
deactivate ISROUser

User -> ISROUser: searchVideo("Mars Mission")
activate ISROUser
ISROUser -> Database: getVideoById("Mars Mission")
activate Database
ISROUser <-- Database: "Retrieved Mars Mission"
deactivate Database
User <-- ISROUser: "Mars Mission"
deactivate ISROUser

User -> Dashboard: viewUploadedVideos()
activate Dashboard
User <-- Dashboard: "Mars Mission, Moon Mission"
deactivate Dashboard

User -> Dashboard: viewClassifiedVideos()
activate Dashboard
User <-- Dashboard: "Educational, Documentary"
deactivate Dashboard

User -> Dashboard: viewStats()
activate Dashboard
User <-- Dashboard: "Views: 1000, Genre Distribution: 50% Educational, 50% Documentary"
deactivate Dashboard

User -> Database: updateUser()
activate Database
User <-- Database: true

deactivate User

Database -> IDataManagement: synchronizeData()
activate IDataManagement
Database <-- IDataManagement: true
deactivate IDataManagement
deactivate Database

@enduml


6. User Roles and Permissions


@startuml
!define ACTOR actor

ACTOR "User\n(user1)" as user
ACTOR "Admin\n(admin1)" as admin
ACTOR "ISROUser\n(isroUser1)" as isroUser
ACTOR "GeneralUser\n(generalUser1)" as generalUser
participant "IAuthentication\n(iAuthentication1)" as auth
participant "INotificationManagement\n(iNotificationManagement1)" as notif
participant "Database" as db


user -> auth: register()
activate auth
activate user
auth --> user: Registration Successful (true)
deactivate auth

user -> auth: login()
activate auth
auth --> user: Login Successful (true)
deactivate auth
deactivate user


admin -> admin: viewUserStats()
activate admin
admin --> admin: "Total Users: 100\nActive: 80\nInactive: 20"
deactivate admin


isroUser -> isroUser: classifyVideo()
activate isroUser
isroUser --> isroUser: Video Classified as "Educational"
deactivate isroUser

isroUser -> isroUser: shareVideo()
activate isroUser
isroUser --> isroUser: Video Shared Successfully (true)
deactivate isroUser


generalUser -> generalUser: viewVideoContent()
activate generalUser
generalUser --> generalUser: "Viewed Moon Mission"
deactivate generalUser


admin -> notif: sendNotification("New Video Uploaded: Mars Mission")
activate notif
activate admin
notif --> admin: Notification Sent Successfully (true)
deactivate admin


notif -> user: "New Video Uploaded: Mars Mission"
activate user
user --> notif: Notification Acknowledged
deactivate user
notif -> isroUser: "New Video Uploaded: Mars Mission"
activate isroUser
isroUser --> notif: Notification Acknowledged
deactivate isroUser
notif -> generalUser: "New Video Uploaded: Mars Mission"
activate generalUser
generalUser --> notif: Notification Acknowledged
deactivate generalUser
deactivate notif


user -> auth: logout()
activate auth
activate user
auth --> user: Logout Successful (true)
deactivate auth
deactivate user
@enduml


7. Video Sharing and Collaboration

@startuml
!define ACTOR actor

ACTOR "ISROUser\n(isroUser1)" as isroUser
participant "IVideoManagement\n(iVideoManagement1)" as iVideoManagement
participant "Video\n(video1)" as video
participant "Database\n(database1)" as database



isroUser -> iVideoManagement: uploadVideo()
activate iVideoManagement
activate isroUser
iVideoManagement --> isroUser: Video Uploaded Successfully
deactivate iVideoManagement

isroUser -> video: classifyVideo()
activate video
video --> isroUser: Classified as "Educational"
deactivate video

isroUser -> video: editMetadata()
activate video
video --> isroUser: Metadata Edited Successfully
deactivate video

isroUser -> video: shareVideo()
activate video
video --> isroUser: Video Shared Successfully
deactivate video

isroUser -> database: addVideo()
activate database
database --> isroUser: true (Video Added)
deactivate database

isroUser -> database: getVideoById()
activate database
database --> isroUser: Retrieved Video by ID
deactivate database

isroUser -> isroUser: viewStats()

isroUser --> isroUser: "Viewed Mars Mission"
deactivate isroUser
@enduml


8. Video Playback and Streaming


@startuml
!define ACTOR actor

ACTOR "ISROUser\n(isroUser1)" as isroUser
ACTOR "GeneralUser\n(generalUser1)" as generalUser
participant "Video\n(video1)" as video
participant "Database\n(database1)" as database



isroUser -> video: searchVideo("Mars Mission")
activate isroUser
activate video
video --> isroUser: "Mars Mission Found"


isroUser -> video: play()

video --> isroUser: "Playing Mars Mission"
deactivate video

isroUser -> isroUser: viewStats()

isroUser --> isroUser: "Viewed Mars Mission"

deactivate isroUser
generalUser -> video: searchVideo("Mars Mission")
activate generalUser
activate video
video --> generalUser: "Mars Mission Found"


generalUser -> video: play()

video --> generalUser: "Playing Mars Mission"


generalUser -> video: viewVideoContent()

video --> generalUser: "Viewing Mars Mission"
deactivate video
deactivate generalUser
isroUser -> database: getUserById()
activate isroUser
activate database
database --> isroUser: "Retrieved User by ID"
deactivate isroUser


generalUser -> database: getUserById()
activate generalUser
database --> generalUser: "Retrieved User by ID"

deactivate generalUser

video -> database: getVideoById()
activate video

database --> video: "Retrieved Video by ID"
deactivate database
deactivate video
deactivate isroUser
@enduml
